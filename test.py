# Set the log level to hide some basic warning/info generated by Tensorflow
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import tensorflow as tf
import tensorflow.keras as keras

""" Create a LeNet-5 model """
# Set the convolutional layer settings
reg = keras.regularizers.l2(0.0005)
kwargs = {'activation': 'elu',
          'kernel_initializer': 'he_normal',
          'kernel_regularizer': reg,
          'bias_regularizer': reg}

# Build the layers
input_layer = keras.layers.Input(shape=(28,28,1), name='input')
conv_1 = keras.layers.Conv2D(20, 5, name='conv_1',**kwargs)(input_layer)
maxp_1 = keras.layers.MaxPool2D((2,2), name='maxp_1')(conv_1)
conv_2 = keras.layers.Conv2D(50, 5, name='conv_2', **kwargs)(maxp_1)
maxp_2 = keras.layers.MaxPool2D((2,2), name='maxp_2')(conv_2)
conv_3 = keras.layers.Conv2D(100, 4, name='conv_3', **kwargs)(maxp_2)
flatten = keras.layers.Flatten(name='flatten')(conv_3)
pred = keras.layers.Dense(10,name='pred')(flatten)

# Create the Keras model
model = keras.Model(inputs=input_layer,
                    outputs=pred)

print(model.summary())

""" Train the model """
# Compile for training
model.compile(optimizer=keras.optimizers.SGD(lr=0.001,momentum=0.9,nesterov=True),
                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True,name=name[-1] + '_loss'),
                metrics=['accuracy'])

